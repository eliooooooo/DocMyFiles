import { fileURLToPath } from 'url';
import { config } from 'dotenv';
import chalk from 'chalk';
import { exec } from 'child_process';
import { writeFileSync, promises, readdirSync, statSync } from 'fs';
import { fileSync } from 'tmp';
import { join, dirname } from 'path';
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
config({ path: __dirname + '/.env' })

import { createInterface } from 'readline';
const rl = createInterface({
	input: process.stdin,
	output: process.stdout
});

import OpenAI from 'openai';
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });


// *------------------------------------*
// |                                    |
// |         CUSTOMIZE VARIABLES        |
// |                                    |
// *------------------------------------*
const enableTokenizer = true; // enable it will execute a python script to count the tokens, make sure to have python installed

const projectPath = './project/PocketTimer/'; // Don't forget to custom the project path
const avoid = ['.git']; // Don't forget to custom the avoid table to avoid some files or directories
const description = 'This is an vscode extension that allow user to generate conventionnals commit from his inputs.'; // Don't forget to custom the description of your project


// *------------------------------------*
// |                                    |
// |           GLOBAL VARIABLES         |
// |                                    |
// *------------------------------------*
let fileStack = [];
let messages = [
	{ role: 'system', content: 'You are a useful assistant, specialized in programming. You\'re mainly used to generate custom readme files. Here is a short description of my project : ' + description + '. Here are my project files so that you can generate a custom README for me :' },
];


// *------------------------------------*
// |                                    |
// |           FUNCTIONS                |
// |                                    |
// *------------------------------------*
/**
 * Process the message
 * @param {string} message
 * 
 * @returns {void}
 */
async function processMessage(message, listRequest, listMessages, listMessagesSize, totalMessages, ignoredFiles) {
	let tmpMessage = fileSync();
	writeFileSync(tmpMessage.name, JSON.stringify([message]));
	await new Promise((resolve, reject) => {
		exec(`python3 tokenCounter.py "${tmpMessage.name}"`, (error, stdout, stderr) => {
			if (error) {
				console.error(`exec error: ${error}`);
				return;
			}
			if (Number(stdout) > 50000) {
				console.log(chalk.red('Message too big, it will be ignored.'));
				ignoredFiles += 1;
			} else {
				if (listMessagesSize + Number(stdout) > 50000) {
					listRequest.push(listMessages);
					console.log(chalk.magenta('Request added to the list with ' + listMessages.length + ' messages ' + '( ' + listRequest.length + ' requests )'));
					totalMessages += listMessages.length;
					listMessages = [];
					listMessagesSize = 0;
				}
				listMessages.push(message);
				listMessagesSize += Number(stdout);
				// console.log(chalk.green('Message added to the request.'));
			}
			resolve();
		});
	});
	return Promise.resolve({ listRequest, listMessages, listMessagesSize, totalMessages, ignoredFiles });
}

/**
 * Send the request to OpenAI
 * @param {string} projectPath
 * @param {string[]} messages
 * 
 * @returns {void}
 */
async function sendRequest(projectPath, messages) {
	const footer = "<br><br> This README was generated by [DocMyFiles](https://github.com/eliooooooo/DocMyFiles).";
	let bigRequest = false;
	let requestSize = 0;
	try {
		if (enableTokenizer) {
			let tmpMessage = fileSync();
			writeFileSync(tmpMessage.name, JSON.stringify(messages)); 
			await new Promise((resolve, reject) => {
				exec(`python3 tokenCounter.py "${tmpMessage.name}"`, (error, stdout, stderr) => {
					if (error) {
						console.error(`exec error: ${error}`);
						reject(error);
						return;
					}
					if (Number(stdout) > 50000 ) {
						bigRequest = true;
						requestSize = Number(stdout);
						console.log("");
						console.log(chalk.red('/------------------------------------------------------------------\\'));
						console.log(chalk.red('Your request is too big, the request will be send in multiple parts.'));
						console.log(chalk.red('\\------------------------------------------------------------------/'));
					} 
					let estimatedPrice = (stdout/1000)*0.0005;
					let price = stdout.trim() + ' ( ' + chalk.red('+- ' + estimatedPrice.toFixed(3) + ' $') + ' )';
					console.log(chalk.bold('Estimated tokens price : '), price);
					console.log("");
					resolve();
				});
			});
		}

		const answer = await new Promise((resolve) => {
			rl.question('Do you want to send the request? ' + chalk.gray('(yes/no) [yes] '), (answer) => {
				resolve(answer);
			});
		});

		if (answer.toLowerCase() === 'yes' ||  answer === ''){
			if (bigRequest) {
				let listRequest = [];
				let listMessages = [];
				let listMessagesSize = 0;
				let totalMessages = 0;
				let ignoredFiles = 0;
				
				// Define the number of request to send
				let estimatedNumber = Math.ceil(requestSize/55000);
				console.log('');
				console.log(chalk.cyan('Request will be send in approx. ' + estimatedNumber + ' parts.'));
				console.log(chalk.cyan('Parsing request...'));
				console.log('');
				console.log('---------------');

				// Split the messages in multiple parts
				for (let message of messages) {
					let messageVar = await processMessage(message, listRequest, listMessages, listMessagesSize, totalMessages, ignoredFiles);
					listRequest = messageVar.listRequest;
					listMessages = messageVar.listMessages;
					listMessagesSize = messageVar.listMessagesSize;
					totalMessages = messageVar.totalMessages;
					ignoredFiles = messageVar.ignoredFiles;
				};
				// Push the last request and Show the overview of the process
				listRequest.push(listMessages);
				totalMessages += listMessages.length;
				console.log(chalk.magenta('Request added to the list with ' + listMessages.length + ' messages ' + '( ' + listRequest.length + ' requests )'));
				console.log("---------------");
				console.log("");
				console.log(chalk.bold(chalk.green("Parsing done ! ")) + "Overview of the request : ");
				console.log('Request parsed in ' + chalk.cyan(listRequest.length + ' parts.'));
				console.log('With a total of ' + chalk.cyan(totalMessages + ' messages.'));
				console.log(chalk.red(ignoredFiles) + ' files have been ignored because they were too big.');
				console.log("");

			} else {
				console.log('Sending request to OpenAI...');
				const response = await openai.chat.completions.create({
					model: 'gpt-3.5-turbo',
					messages: messages
				});
			}

			const tokensUsed = response.usage.total_tokens;
			const price = (tokensUsed/1000)*0.0005;
			writeFileSync(join(__dirname, projectPath, 'README.md'), response.choices[0].message.content + footer);
			console.log("------------------")
			console.log('README generated in : ' , chalk.green(join(__dirname, projectPath, 'README.md')));
			console.log('Tokens used : ', tokensUsed , '( ' + chalk.red('+- ' + price.toFixed(3) + ' $') + ' )');
		} else {
			console.log(chalk.yellow('Request not sent.'));
		}
		rl.close();
	} catch (err) {
		console.error(err);
	}
}

/**
 * Process the file
 * @param {string} filePath
 * 
 * @returns {void}
 */
async function processFile(filePath) {
	try {
		let data = await promises.readFile(join(__dirname, filePath), 'utf8');
		data = JSON.stringify(data);
		messages.push({ role: 'user', content: 'Here is my ' + filePath + ' file : ' + data + '' });
	} catch (err) {
		console.error(err);
	}
}

/**
 * Process the project directory
 * @param {string} projectPath
 * @param {string[]} avoid
 * 
 * @returns {void}
 */
async function processDirectory(projectPath, avoid) {
	try {
		const childs = readdirSync(projectPath);
	
		for (const child of childs) {		
			const childPath = join(projectPath, child);

			if (avoid.some(av => childPath.includes(av))) continue;
			// console.log('Processing file: ', childPath);
			
			if (statSync(childPath).isFile()) {
				fileStack.push(childPath);
			} else {
				processDirectory(childPath, avoid);
			}
		}
		
	} catch (err) {
		console.error(err);
	}
}


// *------------------------------------*
// |                                    |
// |           MAIN PROGRAM             |
// |                                    |
// *------------------------------------*

// get all files (- avoid) in the project directory
processDirectory(projectPath, avoid);

console.log(chalk.bold('Files to process : '), fileStack);

// process all files
Promise.all(fileStack.map(element => processFile(element)))
.then(() => { sendRequest(projectPath, messages); })
.catch(err => console.error(err));